# Definisi semua layanan (container) yang akan berjalan
services:
  # Layanan MySQL Database
  mysql_db:
    image: mysql:8.0 # Menggunakan image MySQL versi 8.0
    container_name: mysql_db # Nama container agar mudah diidentifikasi
    environment: # Variabel lingkungan untuk konfigurasi MySQL
      MYSQL_ROOT_PASSWORD: gusdanencintajuli # Password root untuk MySQL
      MYSQL_DATABASE: distributed_system_db # Nama database yang akan dibuat
    ports:
      - "3306:3306" # Memetakan port 3306 host ke port 3306 container
    volumes:
      - mysql_data:/var/lib/mysql # Persistent volume untuk menyimpan data MySQL
    networks:
      - app_network # Menghubungkan ke custom network
    healthcheck: # Cek kesehatan container MySQL
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"] # Perintah untuk cek kesehatan
      interval: 10s # Interval cek kesehatan
      timeout: 5s # Timeout untuk cek kesehatan
      retries: 5 # Jumlah percobaan ulang jika gagal

  # Layanan Redpanda (Pengganti Kafka dan Zookeeper)
  redpanda:
    image: redpandadata/redpanda:latest # Menggunakan image Redpanda terbaru
    container_name: redpanda # Nama container
    command: # Perintah untuk memulai Redpanda
      - redpanda start
      - --smp 1 # Menggunakan 1 CPU core
      - --memory 1G # Mengalokasikan 1GB memori
      - --overprovisioned # Mengizinkan overprovisioning memori
      - --node-id 0 # ID node Redpanda
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092 # Alamat Kafka listener
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092 # Alamat yang diiklankan ke klien
    ports:
      - "29092:29092" # Port Internal Kafka (untuk komunikasi antar container)
      - "9092:9092" # Port Eksternal Kafka (untuk akses dari localhost)
    networks:
      - app_network # Menghubungkan ke custom network
    healthcheck: # Healthcheck untuk Redpanda
      test: ["CMD", "rpk", "cluster", "health"] # Perintah cek kesehatan Redpanda
      interval: 10s
      timeout: 5s
      retries: 5

  # Layanan Order Service (Flask Python API)
  order_service:
    build:
      context: ./order_service # Lokasi Dockerfile dan kode sumber
      dockerfile: Dockerfile
    container_name: order_service # Nama container
    ports:
      - "8080:5000" # Memetakan port 8080 host ke port 5000 container
    environment: # Variabel lingkungan yang akan diakses oleh app.py
      MYSQL_HOST: mysql_db # Host MySQL (nama service di docker-compose)
      MYSQL_USER: root
      MYSQL_PASSWORD: gusdanencintajuli # Harus sama dengan di mysql_db
      MYSQL_DB: distributed_system_db
      KAFKA_BOOTSTRAP_SERVERS: redpanda:29092 # Host Kafka (nama service di docker-compose)
      KAFKA_TOPIC: order_data_topic # Topik Kafka untuk publish data pesanan
    depends_on: # Order Service akan mulai setelah MySQL dan Redpanda sehat
      mysql_db:
        condition: service_healthy # Menunggu MySQL sehat
      redpanda:
        condition: service_healthy # Menunggu Redpanda sehat
    networks:
      - app_network # Menghubungkan ke custom network

  # Layanan Kafka Consumer (Python Script)
  kafka_consumer:
    build:
      context: ./kafka_consumer # Lokasi Dockerfile dan kode sumber
      dockerfile: Dockerfile
    container_name: kafka_consumer # Nama container
    environment: # Variabel lingkungan yang akan diakses oleh consumer.py
      KAFKA_BOOTSTRAP_SERVERS: redpanda:29092 # Host Kafka
      KAFKA_TOPIC: order_data_topic # Topik Kafka untuk consume pesan
      SUPABASE_URL: "https://soirurtsuoristwzfhpl.supabase.co" # URL Supabase API Anda
      SUPABASE_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNvaXJ1cnRzdW9yaXN0d3pmaHBsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxMjU4NjMsImV4cCI6MjA2NzcwMTg2M30.1rNSMJmkYK63771YOHc-tGx4CgV6V-ltfgVqV5F1HIc" # Anon Public Key Supabase Anda
    depends_on: # Consumer akan mulai setelah Redpanda sehat
      redpanda:
        condition: service_healthy # Tunggu Redpanda sehat
    networks:
      - app_network # Menghubungkan ke custom network

# Definisi custom network untuk komunikasi antar service
networks:
  app_network:
    driver: bridge

# Definisi persistent volumes untuk data database
volumes:
  mysql_data: # Volume untuk data MySQL
